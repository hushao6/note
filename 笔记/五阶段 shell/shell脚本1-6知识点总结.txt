1、shell种类
	/bin/sh
	/bin/bash	linux默认解释器
	/sbin/nologin
	/bin/tcsh
	/bin/csh
	/bin/ksh

2、重定向
	>	重定向标准输出，操作会覆盖目标文件（先清空、再写入）
	>>	可实现追加重定向输出
	2>	可实现重定向错误信息（先清空、再写入）
	2>>	可实现追加重定向输出错误信息
	&>	将正常输出、错误输出重定向同一个文件
	<	重定向标准输入

3、规范脚本构成
	— 脚本声明（需要的解释器、作者信息等）
	— 注释信息（步骤、思路、用途、变量含义等）
	— 可执行语句（操作代码）

4、shell变量
	注意事项：— 若变量名已存在，相当于重新赋值
		 — 等号两边不能有空格
		 — 变量名由字母/数字/下划线组成，区分大小写
		 — 变量名不能以数字开头，不要使用关键字和特殊字符

	定义变量：变量名=变量值
	查看变量：echo $变量名、echo ${变量名}
	取消变量：unset 变量名

	变量种类：
		环境变量：变量名通常大写，由系统维护，用来设置工作环境，个别变量用户可以直接修改
			env、set
			PWD/PATH/USER/UID......
		位置变量：bash内置，存储执行脚本时提供的参数
			$1、$2......$n
		预定义变量：bash内置，可直接调用，但不能赋值或修改
			$0、$$、$?、$#、$*
		自定义变量：由我们自己设定，修改或使用
		
	变量范围控制：
		双引号：不屏蔽$调用的变量
		单引号：屏蔽$调用的变量
		反撇号：将命令的输出作为参数值使用

	变量作用范围：局部变量，只能再当前shell环境中使用
		       全局变量，在所有shell环境中均能使用，可使用export声明，取消是export -n

	read标准输入取值：read -p "提示信息" 变量名
	
	终端显示控制：stty -echo	关闭显示输出
		        stty echo	回复显示输出
5、数值运算
	$[]或$(())		可结合echo命令输出
	expr
	let		会一直改变变量的值
	bc		可以用于小数运算，使用scale设定小数位个数时，有bug

6、条件测试
	字符串测试：
		==： 比较两个字符串是否相同
		！=：比较两个字符串是否不相同
		-z： 检查变量的值是否未设置（空值）
		-n：检查变量的值是否已设置（不是空值）

	数值比较：
		-eq：等于
		-ne：不等于
		-le：小于等于
		-ge：大于等于
		-lt：小于
		-gt：大于

	识别文件/目录状态：判断时使用普通用户，root无视一切权限
		-e：判断对象是否存在（不管是目录还是文件）
		-d 判断对象是否为目录（存在且是目录）
		-f 判断对象是否为文件（存在且是文件）
		-r 判断对象是否可读
		-w 判断对象是否可写
		-x 判断对象是否具有可执行权限

	逻辑条件：
		&&：逻辑与，给定条件必须都成立，整个测试结果才为真
		||：逻辑或，只要其中一个条件成立，则整个测试结果为真。
	
7、if选择结构
	单分支：if  条件测试
		then  
		命令序列
	             fi
	
	双分支：if  条件测试
		then
		命令序列1
		else  
		命令序列2
		fi

	多分支：if    条件测试1 ;then  
		命令序列1
		elif  条件测试2 ;then  
		命令序列2
		else
		命令序列n
		fi

8、循环结构
	for循环：
		for  变量名  in  值列表
		do
    			命令序列
		done

	while：
		while  条件测试
		do
    			命令序列
		done
		while :
		do
    			命令序列
		done

9、case分支
	case  变量  in
	模式1)
    		命令序列1 ;;
	模式2)
    		命令序列2 ;;
    		.. ..
	*)
  		默认命令序列
	esac

10、shell函数
	function  函数名 {
   	   命令序列
   	   .. ..
	}
	
	函数名() {
    	   命令序列
    	   .. ..
	}

11、终断及退出
	通过break、continue、exit在Shell脚本中实现中断与退出的功能
		break：可以结束整个循环
		continue：结束本次循环，进入下一次循环
		exit：结束整个脚本
	
12、字符串截取及切割以及初值设置
	字符串截取的3种用法：
		${变量名:起始位置:长度}			##下标从0开始
		expr substr "$变量名" 起始位置 长度		##下标从1开始
		echo $变量名 | cut -b 起始位置-结束位置	##下标从1开始
	
	字符串替换的两种用法：
		只替换第一个匹配结果：${变量名/old/new}
		替换全部匹配结果：${变量名//old/new}
	
	字符串掐头去尾：
		从左向右，最短匹配删除：${变量名#*关键词}
		从左向右，最长匹配删除：${变量名##*关键词}
		从右向左，最短匹配删除：${变量名%关键词*}
		从右向左，最长匹配删除：${变量名%%关键词*}
	
	字符串初值处理：
		${var:-word}：若变量var已存在且非Null，则返回 $var 的值；否则返回字串“word”，原变量var的值不受影响

13、正则表达式
	基本正则：
		^：匹配行首
		$：匹配行尾
		[]：集合，匹配集合中的任意单个字符
		[^]：对集合取反
		.：匹配任意单个字符
		*：匹配前一个字符任意次数，*不允许单独使用
		\{n,m\}：匹配前一个字符n到m次
		\{n\}：匹配前一个字符n次
		\{n,\}：匹配前一个字符n次及以上
		\(\)：保留

	扩展正则：
		+：最少匹配一次
		？：最多匹配一次
		{n,m}：匹配n到m次
		（）：组合为整体，保留
		|：或者
		\b：单词边界

14、sed基本用法
	格式：sed  [选项]  '条件指令'  文件
	sed命令的常用选项如下：
		-n（屏蔽默认输出，默认sed会输出读取文档的全部内容）
		-r（让sed支持扩展正则）
		-i（sed直接修改源文件，默认sed只是通过内存临时修改文件，源文件无影响）

	sed命令操作指令：
		p：打印文本
		d：删除文本
		s：替换文本
		i： 在指定的行之前插入文本
		a：在指定的行之后追加文本
		c：替换指定的行
	
15、使用awk提取文本
	格式：awk [选项] '[条件]{指令}' 文件
		-F：选项 -F 可指定分隔符
	
	awk常用内置变量：
		$0 	文本当前行的全部内容
		$1	文本的第1列
		$2	文件的第2列
		$3	文件的第3列，依此类推
		NR	文件当前行的行号
		NF	文件当前行的列数（有几列）
	
	awk处理机制：
		awk  [选项]  '[条件]{指令}'  文件
		awk  [选项]  ' BEGIN{指令} {指令} END{指令}'  文件

		BEGIN{ }	行前处理，读取文件内容前执行，指令执行1次
		{ }	逐行处理，读取文件过程中执行，指令执行n次
		END{ }	行后处理，读取文件结束后执行，指令执行1次

	awk数值比较：
		==(等于) 
		!=（不等于） 
		>（大于）
		>=（大于等于） 
		<（小于） 
		<=（小于等于

	awk流程控制：
		if分支结构（单分支、双分支、多分支）

		单分支：awk -F: '{if($3>1000){i++}}END{print i}' /etc/passwd
		双分支：awk -F: '{if($7~/bash$/){i++}else{j++}} END{print i,j}' /etc/passwd

	awk数组：数组是一个可以存储多个值的变量
		定义数组的格式：数组名[下标]=元素值
		调用数组的格式：数组名[下标]
		遍历数组的用法：for(变量 in 数组名){print 数组名[变量]}。
