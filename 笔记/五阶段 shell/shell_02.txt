回顾
1,声明解释器 
#!/bin/bash
2,注释
#
3,执行代码

bash优点
tab键,快捷键,历史记录,管道符,重定向

变量
1,自定义变量

2,环境变量
USER UID HOME HOSTNAME SHELL PWD PATH PS1 PS2
3,位置变量和预定义变量
$1 $2 $3 ....
$0  $$  $#  $*  $?  $!

变量扩展
""   ''   ``  $()
read -p
stty -echo
stty echo

exprot  发布全局变量
exprot -n 

shell中的运算
1  
expr 1 + 1
expr 1 \* 1
expr 1 % 1
2
$[]  $(())
echo $[1+1]
3
let a=1+1
let a++   let a--
let a+=2  let a%=5
4
echo "scale=3;10/3" | bc

--------------------------------------------------------------
shell中的条件测试:
使用方式
1,test 测试语句
2,[  测试语句 ]
=========================================
测试内容包含:
1,字符串
==是否相等   !=是否不等     -z是否为空
test a == a  或者  [  a == a ]    使用  echo $?查看结果
2,数字
-eq等于  -ne不等于  -gt大于  -ge大于等于  -lt小于  -le小于等于
3,文件
-e 判断文件是否存在,不关心文件类型  -d 判断目录是否存在  -f 判断普通文件是否存在  -r   -w   -x
4,  逻辑测试 
&&并且        之前的任务成功,之后的任务才会执行
||或者           之前的任务失败,之后的任务才会执行

[ $USER == root ] && echo "我 是 管理员"      
-----------------------------------------------------------------------
两个逻辑符号连续使用:
ls a || ls b && ls test1.sh
a
test1.sh
ls a || ls b || ls test1.sh
a
ls a && ls b || ls test1.sh
a
b
-----------------------------------------------------------------------
[ $USER == root ] && echo "我 是 管理员"  ||  echo "我不是管理员"

编写脚本, 每2分钟检测当前登录系统的用户数量,如果超过3人,发邮件通知管理员
#!/bin/bash
n=`who | wc -l`
[ $n -gt 3 ] && echo "有人入侵服务器!隔壁老王来了" | mail -s test root
保存退出之后赋予脚本x权限 
chmod +x test1.sh
然后在计划任务中添加时间频率和执行的脚本路径
crontab -e
*/2 * * * * /opt/test1.sh
-----------------------------------------------------------------------
mail -s test root < 123    使用输入重定向发送邮件
-----------------------------------------------------------------------
shell中的if
单分支
if 条件测试 ;then
	命令序列
fi
双分支
if 条件测试 ;then
	命令序列1
else
	命令序列2
fi
多分支
if 条件测试 ;then
	命令序列1
elif 条件测试 ;then
	命令序列2
else
	命令序列3
fi
------------------------------------------------------------------------
ping -c定义ping次数  -i定义间隔时间,秒  -W等待反馈信息的时间,秒
ping -c 3 -i 0.2 -W 1 172.25.0.10
------------------------------------------------------------------------
使用if双分支编写ping脚本:
#!/bin/bash
ping -c 3 -i 0.2 -W 1 172.25.0.10 &> /dev/null
if [ $? -eq 0 ] ;then
	echo "通了"
else
	echo "不通"
fi
-------------------------------
#!/bin/bash
ping -c 3 -i 0.2 -W 1 $1 &> /dev/null
if [ $? -eq 0 ] ;then
	echo "通了"
else
	echo "不通"
fi
-----------------------------------------------------------------------
使用if多分支编写猜数脚本:
#!/bin/bash
x=$[RANDOM%10]
read -p "请输入一个数字(0-9)"  n
if [ $x -eq $n ] ;then
        echo "猜对了!!"
elif [ $n -lt $x ] ;then
        echo "猜小了"
else
        echo "猜大了"
fi
=================================
for循环:
for 变量名称 in 值1 值2 值3......
do
	执行指令
done
-------------------------
1, 循环次数,和值有关   2, 循环时的变量,也和值有关
-------------------------
#!/bin/bash
for i in {1..10}     多个值的简单写法
do
        echo $i
done
--------------------------------- 
#!/bin/bash
a=10
for i in {1..$a}     大括号不支持套用变量
do
        echo $i
done
---------------------------------
#!/bin/bash
a=10
for i in `seq $a`    可以使用seq支持变量
do
        echo $i
done
------------------------------------------------
#!/bin/bash
x=0
y=0
for i in {1..15}
do
    ping -c 3 -i 0.2 -W 1 172.25.0.$i &> /dev/null
    if [ $? -eq 0 ];then
        echo "172.25.0.$i通了"
        let x++
    else
        echo "172.25.0.$i不通"
        let y++
    fi
done
echo "$x台通了,$y台不通"
=======================================
while循环
while 条件测试
do
	执行指令
done
---------------------------------------------
使用while循环编写猜数脚本,猜对为止
#!/bin/bash
x=$[RANDOM%100]
y=0
while :
do
        let y++
        read -p "请输入数字(0-99)" n
        if [ $x -eq $n ];then
                echo "猜对了!!猜了$y次"
                exit
        elif [ $n -lt $x ];then
                echo "猜小了"
        else
                echo "猜大了"
        fi
done
























